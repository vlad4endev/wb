// –°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–ª–∏ DEVELOPER –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function setDeveloperRole() {
  try {
    const userId = 'cmfbry14q0000136cf6k6yhu2';
    
    console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å DEVELOPER –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await prisma.user.update({
      where: { id: userId },
      data: { 
        role: 'DEVELOPER',
        isProtected: true
      },
    });
    
    console.log('‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
      id: updatedUser.id,
      email: updatedUser.email,
      name: updatedUser.name,
      role: updatedUser.role,
      isProtected: updatedUser.isProtected
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

setDeveloperRole();
