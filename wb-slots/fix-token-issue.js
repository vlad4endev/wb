const { PrismaClient } = require('@prisma/client');
const { encrypt } = require('./src/lib/encryption');

const prisma = new PrismaClient();

async function fixTokenIssue() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å —Ç–æ–∫–µ–Ω–∞–º–∏...\n');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        isActive: true
      }
    });
    
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    
    for (const user of users) {
      console.log(`\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email} (ID: ${user.id})`);
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const tokens = await prisma.userToken.findMany({
        where: { userId: user.id },
        select: {
          id: true,
          category: true,
          isActive: true,
          createdAt: true
        }
      });
      
      console.log(`   üîë –¢–æ–∫–µ–Ω–æ–≤: ${tokens.length}`);
      
      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º SUPPLIES —Ç–æ–∫–µ–Ω
      const suppliesToken = await prisma.userToken.findFirst({
        where: {
          userId: user.id,
          category: 'SUPPLIES',
          isActive: true
        }
      });
      
      if (suppliesToken) {
        console.log(`   ‚úÖ SUPPLIES —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: ${suppliesToken.id}`);
      } else {
        console.log('   ‚ùå SUPPLIES —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        const testToken = `test-supplies-token-${Date.now()}`;
        const encryptedToken = encrypt(testToken);
        
        try {
          const newToken = await prisma.userToken.create({
            data: {
              userId: user.id,
              category: 'SUPPLIES',
              tokenEncrypted: encryptedToken,
              isActive: true
            }
          });
          
          console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω SUPPLIES —Ç–æ–∫–µ–Ω: ${newToken.id}`);
          console.log(`   üîë –¢–æ–∫–µ–Ω: ${testToken}`);
          
        } catch (error) {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:`, error.message);
        }
      }
      
      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–æ–∫–µ–Ω—ã
      if (tokens.length > 0) {
        console.log('   üìã –í—Å–µ —Ç–æ–∫–µ–Ω—ã:');
        tokens.forEach(token => {
          console.log(`      - ${token.category}: ${token.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'} (${new Date(token.createdAt).toLocaleDateString('ru-RU')})`);
        });
      }
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏...');
    const tasks = await prisma.task.findMany({
      include: { user: true },
      take: 5
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${tasks.length}`);
    
    for (const task of tasks) {
      console.log(`\nüìù –ó–∞–¥–∞—á–∞ #${task.taskNumber}: ${task.name}`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${task.user.email} (ID: ${task.user.id})`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${task.enabled ? '–í–∫–ª—é—á–µ–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏
      const userSuppliesToken = await prisma.userToken.findFirst({
        where: {
          userId: task.user.id,
          category: 'SUPPLIES',
          isActive: true
        }
      });
      
      if (userSuppliesToken) {
        console.log(`   ‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å SUPPLIES —Ç–æ–∫–µ–Ω`);
      } else {
        console.log(`   ‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï–¢ SUPPLIES —Ç–æ–∫–µ–Ω–∞`);
      }
    }
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixTokenIssue();
