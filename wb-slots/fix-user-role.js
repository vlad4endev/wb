// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixUserRole() {
  try {
    console.log('üîÑ –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { id: 'cmfbry14q0000136cf6k6yhu2' }
    });
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
      id: user.id,
      email: user.email,
      name: user.name,
      role: user.role
    });
    
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å
    const updatedUser = await prisma.user.update({
      where: { id: 'cmfbry14q0000136cf6k6yhu2' },
      data: { 
        role: 'DEVELOPER',
        isProtected: true
      }
    });
    
    console.log('‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    console.log('üë§ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
      id: updatedUser.id,
      email: updatedUser.email,
      name: updatedUser.name,
      role: updatedUser.role,
      isProtected: updatedUser.isProtected
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixUserRole();
