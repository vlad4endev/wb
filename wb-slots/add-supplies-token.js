const fetch = require('node-fetch');

async function addSuppliesToken() {
  try {
    console.log('üîë –î–æ–±–∞–≤–ª—è–µ–º SUPPLIES —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API...\n');
    
    // 1. –õ–æ–≥–∏–Ω–∏–º—Å—è
    console.log('1. –õ–æ–≥–∏–Ω–∏–º—Å—è...');
    const loginResponse = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'test@example.com',
        password: 'test123'
      })
    });
    
    const loginData = await loginResponse.json();
    
    if (!loginData.success) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', loginData.error);
      return;
    }
    
    console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', loginData.data.user.email);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫—É–∫–∏
    const cookies = loginResponse.headers.get('set-cookie');
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã...');
    const tokensResponse = await fetch('http://localhost:3000/api/tokens', {
      method: 'GET',
      headers: { 
        'Cookie': cookies || ''
      }
    });
    
    const tokensData = await tokensResponse.json();
    
    if (tokensData.success) {
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${tokensData.data.tokens.length}`);
      tokensData.data.tokens.forEach(token => {
        console.log(`   - ${token.category}: ${token.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
      });
    }
    
    // 3. –î–æ–±–∞–≤–ª—è–µ–º SUPPLIES —Ç–æ–∫–µ–Ω
    console.log('\n3. –î–æ–±–∞–≤–ª—è–µ–º SUPPLIES —Ç–æ–∫–µ–Ω...');
    const tokenResponse = await fetch('http://localhost:3000/api/tokens', {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Cookie': cookies || ''
      },
      body: JSON.stringify({
        category: 'SUPPLIES',
        token: 'test-supplies-token-' + Date.now()
      })
    });
    
    const tokenData = await tokenResponse.json();
    
    if (tokenData.success) {
      console.log('‚úÖ SUPPLIES —Ç–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('üìã ID —Ç–æ–∫–µ–Ω–∞:', tokenData.data.token.id);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', tokenData.error);
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –µ—â–µ —Ä–∞–∑
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è...');
    const finalTokensResponse = await fetch('http://localhost:3000/api/tokens', {
      method: 'GET',
      headers: { 
        'Cookie': cookies || ''
      }
    });
    
    const finalTokensData = await finalTokensResponse.json();
    
    if (finalTokensData.success) {
      console.log(`üìã –ò—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: ${finalTokensData.data.tokens.length}`);
      finalTokensData.data.tokens.forEach(token => {
        console.log(`   - ${token.category}: ${token.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
      });
    }
    
    console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤.');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

addSuppliesToken();
