services:
  postgres:
    image: postgres:15-alpine
    container_name: wb-slots-postgres
    environment:
      POSTGRES_DB: wb_slots
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: wb-slots-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: .
    container_name: wb-slots-app
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/wb_slots?schema=public
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-here-change-in-production
      - ENCRYPTION_KEY=your-32-byte-base64-encryption-key-here
      - APP_BASE_URL=http://localhost:3000
      - NODE_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        npx prisma migrate deploy &&
        npx prisma db seed &&
        node server.js
      "

  worker:
    build: .
    container_name: wb-slots-worker
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/wb_slots?schema=public
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-here-change-in-production
      - ENCRYPTION_KEY=your-32-byte-base64-encryption-key-here
      - NODE_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npx tsx src/workers/index.ts

volumes:
  postgres_data:
  redis_data:
