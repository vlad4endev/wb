// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  phone        String?  @unique
  passwordHash String   @map("password_hash")
  name         String?
  timezone     String   @default("Europe/Moscow")
  role         UserRole @default(USER)
  isActive     Boolean  @default(true) @map("is_active")
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  isProtected  Boolean  @default(false) @map("is_protected")
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  emailVerified DateTime? @map("email_verified")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  tokens           UserToken[]
  warehousePrefs   WarehousePref[]
  tasks            Task[]
  runs             Run[]
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  foundSlots       FoundSlot[]
  supplySnapshots  SupplySnapshot[]
  notificationChannels NotificationChannel[]
  auditLogs        AuditLog[]
  wbSessions       WBSession[]
  settings         UserSettings[]
=======
  supplySnapshots  SupplySnapshot[]
  notificationChannels NotificationChannel[]
  auditLogs        AuditLog[]
>>>>>>> Stashed changes
=======
  supplySnapshots  SupplySnapshot[]
  notificationChannels NotificationChannel[]
  auditLogs        AuditLog[]
>>>>>>> Stashed changes

  @@map("users")
}

model UserToken {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  category    TokenCategory
  tokenEncrypted String   @map("token_encrypted")
  isActive    Boolean     @default(true) @map("is_active")
  lastUsedAt  DateTime?   @map("last_used_at")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_tokens")
}

model WarehousePref {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  warehouseId       Int     @map("warehouse_id")
  warehouseName     String  @map("warehouse_name")
  enabled           Boolean @default(true)
  boxAllowed        Boolean @default(true) @map("box_allowed")
  monopalletAllowed Boolean @default(true) @map("monopallet_allowed")
  supersafeAllowed  Boolean @default(true) @map("supersafe_allowed")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, warehouseId])
  @@map("warehouse_prefs")
}

model Task {
  id          String   @id @default(cuid())
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  taskNumber  Int      @unique @default(autoincrement()) @map("task_number")
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  userId      String   @map("user_id")
  name        String
  description String?
  enabled     Boolean  @default(true)
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  status      TaskStatus @default(PENDING)
  scheduleCron String? @map("schedule_cron")
  autoBook    Boolean  @default(false) @map("auto_book")
  autoBookSupplyId String? @map("auto_book_supply_id")
  filters     Json
  retryPolicy Json     @map("retry_policy")
=======
=======
>>>>>>> Stashed changes
  scheduleCron String? @map("schedule_cron")
  autoBook    Boolean  @default(false) @map("auto_book")
  autoBookSupplyId String? @map("auto_book_supply_id")
  filters     Json     // { coefficientMin: 0, coefficientMax: 20, allowUnload: true, dates: {from, to}, boxTypeIDs: [5,6], warehouseIDs: [...] }
  retryPolicy Json     @map("retry_policy") // { maxRetries: 3, backoffMs: 5000 }
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
  priority    Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  runs Run[]

  @@map("tasks")
}

model Run {
  id        String   @id @default(cuid())
  taskId    String   @map("task_id")
  userId    String   @map("user_id")
  status    RunStatus
  startedAt DateTime @map("started_at")
  finishedAt DateTime? @map("finished_at")
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  foundSlots Int?    @default(0) @map("found_slots")
  summary   Json?
=======
  summary   Json?    // { foundSlots: 0, bookedSlots: 0, errors: [] }
>>>>>>> Stashed changes
=======
  summary   Json?    // { foundSlots: 0, bookedSlots: 0, errors: [] }
>>>>>>> Stashed changes
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs RunLog[]
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  foundSlotsDetails FoundSlot[]
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

  @@map("runs")
}

<<<<<<< Updated upstream
<<<<<<< Updated upstream
model FoundSlot {
  id          String   @id @default(cuid())
  runId       String   @map("run_id")
  userId      String   @map("user_id")
  warehouseId Int      @map("warehouse_id")
  warehouseName String @map("warehouse_name")
  date        String
  timeSlot    String   @map("time_slot")
  coefficient Float
  available   Boolean  @default(true)
  boxTypes    Json     @map("box_types")
  supplyId    String?  @map("supply_id")
  isBooked    Boolean  @default(false) @map("is_booked")
  bookingId   String?  @map("booking_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  run Run @relation(fields: [runId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("found_slots")
}

=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
model RunLog {
  id      String   @id @default(cuid())
  runId   String   @map("run_id")
  level   LogLevel
  message String
  meta    Json?
  ts      DateTime @default(now())

  // Relations
  run Run @relation(fields: [runId], references: [id], onDelete: Cascade)

  @@map("run_logs")
}

model SupplySnapshot {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  preorderId  String?   @map("preorder_id")
  supplyId    String?   @map("supply_id")
  warehouseId Int       @map("warehouse_id")
  boxTypeId   Int       @map("box_type_id")
  statusName  String    @map("status_name")
  supplyDate  DateTime? @map("supply_date")
  factDate    DateTime? @map("fact_date")
  updatedDate DateTime? @map("updated_date")
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  raw         Json
=======
  raw         Json      // Raw WB API response
>>>>>>> Stashed changes
=======
  raw         Json      // Raw WB API response
>>>>>>> Stashed changes
  ts          DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("supply_snapshots")
}

model NotificationChannel {
  id      String            @id @default(cuid())
  userId  String            @map("user_id")
  type    NotificationType
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  config  Json
=======
  config  Json              // { email: "...", telegramChatId: "...", webhookUrl: "..." }
>>>>>>> Stashed changes
=======
  config  Json              // { email: "...", telegramChatId: "...", webhookUrl: "..." }
>>>>>>> Stashed changes
  enabled Boolean           @default(true)
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_channels")
}

model AuditLog {
  id     String   @id @default(cuid())
  userId String   @map("user_id")
  action String
  target String
  meta   Json?
  ts     DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

<<<<<<< Updated upstream
<<<<<<< Updated upstream
model WBSession {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  sessionId   String    @unique @map("session_id")
  cookies     Json
  userAgent   String?   @map("user_agent")
  ipAddress   String?   @map("ip_address")
  isActive    Boolean   @default(true) @map("is_active")
  expiresAt   DateTime  @map("expires_at")
  lastUsedAt  DateTime? @map("last_used_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wb_sessions")
}

model UserSettings {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  category  String
  settings  Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category])
  @@map("user_settings")
}

model Warehouse {
  id        Int      @id
  name      String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("warehouses")
}

model NotificationTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        NotificationTemplateType
  template    String
  variables   Json
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("notification_templates")
}

=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
// Enums
enum UserRole {
  USER
  ADMIN
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  DEVELOPER
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
}

enum TokenCategory {
  STATISTICS
  SUPPLIES
  MARKETPLACE
  CONTENT
  PROMOTION
  ANALYTICS
  FINANCE
}

enum RunStatus {
  QUEUED
  RUNNING
  SUCCESS
  FAILED
  PARTIAL
  CANCELLED
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  COMPLETED
}

enum TaskStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  STOPPED
  BOOKING
  COMPLETED
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

enum NotificationType {
  EMAIL
  TELEGRAM
  WEBHOOK
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream

enum NotificationTemplateType {
  SLOT_FOUND
  BOOKING_SUCCESS
  BOOKING_FAILED
  TASK_STARTED
  TASK_COMPLETED
  TASK_FAILED
  TASK_STOPPED
}
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
