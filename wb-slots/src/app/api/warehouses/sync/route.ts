import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ WB API
interface WBWarehouse {
  id: number;
  name: string;
  isActive: boolean;
}

// Fallback –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤ WB
function getFallbackWarehouses(): WBWarehouse[] {
  return [
    { id: 117501, name: '–ö–∞–∑–∞–Ω—å', isActive: true },
    { id: 117502, name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', isActive: true },
    { id: 117503, name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', isActive: true },
    { id: 117504, name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', isActive: true },
    { id: 117505, name: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', isActive: true },
    { id: 117506, name: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', isActive: true },
    { id: 117507, name: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', isActive: true },
    { id: 117508, name: '–°–∞–º–∞—Ä–∞', isActive: true },
    { id: 117509, name: '–í–æ—Ä–æ–Ω–µ–∂', isActive: true },
    { id: 117510, name: '–£—Ñ–∞', isActive: true },
    { id: 117511, name: '–ü–µ—Ä–º—å', isActive: true },
    { id: 117512, name: '–í–æ–ª–≥–æ–≥—Ä–∞–¥', isActive: true },
    { id: 117513, name: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', isActive: true },
    { id: 117514, name: '–°–∞—Ä–∞—Ç–æ–≤', isActive: true },
    { id: 117515, name: '–¢—é–º–µ–Ω—å', isActive: true },
    { id: 117516, name: '–¢–æ–ª—å—è—Ç—Ç–∏', isActive: true },
    { id: 117517, name: '–ò–∂–µ–≤—Å–∫', isActive: true },
    { id: 117518, name: '–ë–∞—Ä–Ω–∞—É–ª', isActive: true },
    { id: 117519, name: '–£–ª—å—è–Ω–æ–≤—Å–∫', isActive: true },
    { id: 117520, name: '–ò—Ä–∫—É—Ç—Å–∫', isActive: true },
  ];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ WB API
async function fetchWarehousesFromWB(): Promise<WBWarehouse[]> {
  // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö URL –¥–ª—è WB API
  const wbApiUrls = [
    'https://suppliers-api.wildberries.ru/api/v3/warehouses',
    'https://suppliers-api.wildberries.ru/api/v2/warehouses',
    'https://suppliers-api.wildberries.ru/warehouses',
  ];
  
  for (let i = 0; i < wbApiUrls.length; i++) {
    const wbApiUrl = wbApiUrls[i];
    
    try {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${wbApiUrls.length}: –ó–∞–ø—Ä–æ—Å –∫ WB API:`, wbApiUrl);
      
      // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–æ–º
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      
      const response = await fetch(wbApiUrl, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'WB-Slots/1.0.0',
          'Accept': 'application/json',
        },
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      console.log('üì° –û—Ç–≤–µ—Ç WB API:', response.status, response.statusText);

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå –û—à–∏–±–∫–∞ WB API (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}):`, response.status, errorText);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if (i === wbApiUrls.length - 1) {
          throw new Error(`WB API error: ${response.status} ${response.statusText} - ${errorText}`);
        }
        
        // –ò–Ω–∞—á–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É URL
        continue;
      }

      const data = await response.json();
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç WB API:', data?.length || 0, '—Å–∫–ª–∞–¥–æ–≤');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API
      if (Array.isArray(data)) {
        return data.map((warehouse: any) => ({
          id: warehouse.id || warehouse.warehouseId,
          name: warehouse.name || warehouse.warehouseName,
          isActive: warehouse.isActive !== false,
        }));
      } else if (data.data && Array.isArray(data.data)) {
        return data.data.map((warehouse: any) => ({
          id: warehouse.id || warehouse.warehouseId,
          name: warehouse.name || warehouse.warehouseName,
          isActive: warehouse.isActive !== false,
        }));
      } else {
        console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API:', data);
        if (i === wbApiUrls.length - 1) {
          throw new Error('Unexpected API response format');
        }
        continue;
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ ${i + 1}:`, error);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (i === wbApiUrls.length - 1) {
        throw error;
      }
      
      // –ò–Ω–∞—á–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É URL
      continue;
    }
  }
  
  // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ
  console.log('‚ö†Ô∏è WB API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
  return getFallbackWarehouses();
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Å–∫–ª–∞–¥–æ–≤ —Å WB API...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–∫–ª–∞–¥—ã –∏–∑ WB API
    const wbWarehouses = await fetchWarehousesFromWB();
    
    console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤ –∏–∑ WB API: ${wbWarehouses.length}`);
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
    await prisma.warehouse.deleteMany({});
    console.log('üóëÔ∏è  –û—á–∏—â–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–∫–ª–∞–¥—ã
    const createdWarehouses = [];
    for (const warehouse of wbWarehouses) {
      try {
        const created = await prisma.warehouse.create({
          data: {
            id: warehouse.id,
            name: warehouse.name,
            isActive: warehouse.isActive,
          },
        });
        createdWarehouses.push(created);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–ª–∞–¥–∞ ${warehouse.id}:`, error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Å–∫–ª–∞–¥–∞–º–∏
      }
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–∫–ª–∞–¥–æ–≤ –≤ –±–∞–∑–µ: ${createdWarehouses.length}`);
    
    return NextResponse.json({
      success: true,
      data: {
        warehouses: createdWarehouses,
        total: createdWarehouses.length,
        synced: new Date().toISOString(),
      },
      message: `–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–∫–ª–∞–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ ${createdWarehouses.length} —Å–∫–ª–∞–¥–æ–≤`,
    });
    
  } catch (error) {
    console.error('Sync warehouses error:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Å–∫–ª–∞–¥–æ–≤',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

// GET –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
export async function GET(request: NextRequest) {
  try {
    const warehouseCount = await prisma.warehouse.count();
    const lastWarehouse = await prisma.warehouse.findFirst({
      orderBy: { createdAt: 'desc' },
      select: { createdAt: true }
    });
    
    return NextResponse.json({
      success: true,
      data: {
        totalWarehouses: warehouseCount,
        lastSync: lastWarehouse?.createdAt || null,
        status: warehouseCount > 0 ? 'synced' : 'empty'
      }
    });
    
  } catch (error) {
    console.error('Get sync status error:', error);
    
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏' },
      { status: 500 }
    );
  }
}
