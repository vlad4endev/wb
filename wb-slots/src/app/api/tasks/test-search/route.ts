import { NextRequest, NextResponse } from 'next/server';
import { requireAuth } from '@/lib/auth';
import { WBSlotSearch } from '@/lib/wb-slot-search';

export async function POST(request: NextRequest) {
  try {
    const user = await requireAuth(request);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (user.id !== 'cmf8sg2w8000085vkomhit4hv') {
      return NextResponse.json(
        { success: false, error: 'Access denied' },
        { status: 403 }
      );
    }

    const body = await request.json();
    const { warehouseIds, boxTypeIds, coefficientMin, coefficientMax, dateFrom, dateTo, isSortingCenter } = body;

    if (!warehouseIds || !Array.isArray(warehouseIds) || warehouseIds.length === 0) {
      return NextResponse.json(
        { success: false, error: 'Warehouse IDs are required' },
        { status: 400 }
      );
    }

    if (!boxTypeIds || !Array.isArray(boxTypeIds) || boxTypeIds.length === 0) {
      return NextResponse.json(
        { success: false, error: 'Box type IDs are required' },
        { status: 400 }
      );
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    const { prisma } = await import('@/lib/prisma');
    const { decrypt } = await import('@/lib/encryption');
    
    const suppliesToken = await prisma.userToken.findFirst({
      where: {
        userId: user.id,
        category: 'SUPPLIES',
        isActive: true,
      },
    });

    if (!suppliesToken) {
      return NextResponse.json({
        success: false,
        error: 'WB API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω',
        details: {
          message: '–î–ª—è —Ä–∞–±–æ—Ç—ã –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω WB API',
          solution: '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –¢–æ–∫–µ–Ω—ã WB API ‚Üí –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω',
          tokenCategory: 'SUPPLIES',
          userId: user.id,
        },
        config: {
          warehouseIds,
          boxTypeIds,
          coefficientMin,
          coefficientMax,
          dateFrom,
          dateTo,
        },
      });
    }

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
    const testTaskId = `test-search-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    
    let testTask;
    let run;
    
    try {
      testTask = await prisma.task.create({
        data: {
          id: testTaskId,
          userId: user.id,
          name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤',
          enabled: false,
          filters: {
            warehouseIds,
            boxTypeIds,
            coefficientMin: coefficientMin || -1,
            coefficientMax: coefficientMax || -1,
            dates: {
              from: dateFrom || new Date().toISOString(),
              to: dateTo || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
            },
          },
          priority: 1,
          retryPolicy: {
            maxRetries: 3,
            retryDelay: 5000,
          },
        },
      });

      // –°–æ–∑–¥–∞–µ–º Run –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
      run = await prisma.run.create({
        data: {
          taskId: testTask.id,
          userId: user.id,
          status: 'RUNNING',
          startedAt: new Date(),
          summary: {
            testSearch: true,
          },
        },
      });
    } catch (dbError) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ Run –∑–∞–ø–∏—Å–∏:', dbError);
      return NextResponse.json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        details: {
          message: dbError instanceof Error ? dbError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
          taskId: testTaskId,
          userId: user.id,
        },
      }, { status: 500 });
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const searchConfig = {
      userId: user.id,
      taskId: testTask.id, // –¢–µ—Å—Ç–æ–≤—ã–π ID –∑–∞–¥–∞—á–∏
      warehouseIds,
      boxTypeIds,
      coefficientMin: coefficientMin || -1,
      coefficientMax: coefficientMax || -1,
      dateFrom: dateFrom || new Date().toISOString(),
      dateTo: dateTo || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
      stopOnFirstFound: false, // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–º
      isSortingCenter: isSortingCenter !== undefined ? isSortingCenter : false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é false
      runId: run.id, // –ü–µ—Ä–µ–¥–∞–µ–º runId –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    };

    console.log('üß™ Starting test search with config:', searchConfig);
    console.log('üìÖ Date details:', {
      dateFrom: searchConfig.dateFrom,
      dateTo: searchConfig.dateTo,
      dateFromParsed: new Date(searchConfig.dateFrom).toISOString(),
      dateToParsed: new Date(searchConfig.dateTo).toISOString(),
    });

    console.log(`üìù –°–æ–∑–¥–∞–Ω–∞ Run –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞: ${run.id}`);

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤
    const slotSearch = new WBSlotSearch(searchConfig);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    console.log('üîç –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤...');
    const result = await slotSearch.searchSlots();
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', {
      foundSlots: result.foundSlots.length,
      totalChecked: result.totalChecked,
      errors: result.errors.length,
      stoppedEarly: result.stoppedEarly
    });

    console.log('üß™ Test search completed:', {
      foundSlots: result.foundSlots.length,
      totalChecked: result.totalChecked,
      searchTime: result.searchTime,
      errors: result.errors.length,
    });

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É –∏ Run –∑–∞–ø–∏—Å—å
    try {
      await prisma.run.delete({
        where: { id: run.id },
      });
      await prisma.task.delete({
        where: { id: testTask.id },
      });
      console.log('üßπ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏ Run –∑–∞–ø–∏—Å—å –æ—á–∏—â–µ–Ω—ã');
    } catch (cleanupError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', cleanupError);
    }

    return NextResponse.json({
      success: true,
      data: {
        foundSlots: result.foundSlots.length,
        totalChecked: result.totalChecked,
        searchTime: result.searchTime,
        errors: result.errors,
        stoppedEarly: result.stoppedEarly,
        slots: result.foundSlots.slice(0, 10), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å–ª–æ—Ç–æ–≤
        runId: run.id, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º runId –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ (–¥–æ –æ—á–∏—Å—Ç–∫–∏)
        config: {
          warehouseIds,
          boxTypeIds,
          coefficientMin,
          coefficientMax,
          dateFrom,
          dateTo,
          isSortingCenter: isSortingCenter !== undefined ? isSortingCenter : false,
        },
        tokenInfo: {
          hasToken: true,
          tokenId: suppliesToken.id,
          tokenCategory: suppliesToken.category,
          isActive: suppliesToken.isActive,
          lastUsedAt: suppliesToken.lastUsedAt,
        },
      },
      message: 'Test search completed successfully',
    });

  } catch (error) {
    console.error('Test search error:', error);
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    try {
      if (typeof run !== 'undefined' && run?.id) {
        await prisma.run.delete({
          where: { id: run.id },
        });
      }
      if (typeof testTask !== 'undefined' && testTask?.id) {
        await prisma.task.delete({
          where: { id: testTask.id },
        });
      }
      console.log('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
    } catch (cleanupError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏:', cleanupError);
    }
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'Internal server error',
        details: error instanceof Error ? error.stack : undefined,
      },
      { status: 500 }
    );
  }
}
