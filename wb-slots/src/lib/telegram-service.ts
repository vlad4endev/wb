import { prisma } from './prisma';

export interface TelegramNotification {
  userId: string;
  type: 'slot_found' | 'booking_started' | 'booking_completed' | 'booking_failed';
  data: {
    taskId: string;
    taskName: string;
    slot?: {
      warehouseId: number;
      warehouseName: string;
      date: string;
      coefficient: number;
      boxTypes: string[];
    };
    bookingId?: string;
    supplyId?: string;
    error?: string;
  };
}

export class TelegramService {
  private botToken: string;
  private baseUrl: string;

  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN || '';
    this.baseUrl = process.env.TELEGRAM_WEBHOOK_URL || '';
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
   */
  async sendNotification(notification: TelegramNotification): Promise<boolean> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userSettings = await this.getUserTelegramSettings(notification.userId);
      if (!userSettings || !userSettings.chatId) {
        console.log(`‚ö†Ô∏è Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${notification.userId}`);
        return false;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = this.formatMessage(notification);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const success = await this.sendMessage(userSettings.chatId, message);
      
      if (success) {
        console.log(`‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${notification.userId}`);
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${notification.userId}`);
      }

      return success;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async getUserTelegramSettings(userId: string): Promise<{ chatId: string } | null> {
    try {
      const settings = await prisma.userSettings.findFirst({
        where: {
          userId,
          category: 'NOTIFICATION',
        },
      });

      if (!settings) {
        return null;
      }

      const notificationSettings = settings.settings as any;
      const chatId = notificationSettings?.telegram?.chatId;

      if (!chatId) {
        return null;
      }

      return {
        chatId: chatId as string,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram:', error);
      return null;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
   */
  private formatMessage(notification: TelegramNotification): string {
    const { type, data } = notification;
    
    let message = `ü§ñ *WB –ê–≤—Ç–æ –õ–æ—Ç—ã*\n\n`;
    
    switch (type) {
      case 'slot_found':
        message += `üéØ *–°–ª–æ—Ç –Ω–∞–π–¥–µ–Ω!*\n\n`;
        message += `üìã *–ó–∞–¥–∞—á–∞:* ${data.taskName}\n`;
        message += `üè¢ *–°–∫–ª–∞–¥:* ${data.slot?.warehouseName}\n`;
        message += `üìÖ *–î–∞—Ç–∞:* ${data.slot?.date}\n`;
        message += `üìä *–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:* ${data.slot?.coefficient}\n`;
        message += `üì¶ *–¢–∏–ø—ã –ø–æ—Å—Ç–∞–≤–∫–∏:* ${data.slot?.boxTypes?.join(', ')}\n\n`;
        message += `‚è≥ *–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é...*`;
        break;

      case 'booking_started':
        message += `üîê *–ù–∞—á–∞—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ*\n\n`;
        message += `üìã *–ó–∞–¥–∞—á–∞:* ${data.taskName}\n`;
        message += `üì¶ *–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏:* ${data.supplyId}\n`;
        message += `üè¢ *–°–∫–ª–∞–¥:* ${data.slot?.warehouseName}\n`;
        message += `üìÖ *–î–∞—Ç–∞:* ${data.slot?.date}\n\n`;
        message += `‚è≥ *–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...*`;
        break;

      case 'booking_completed':
        message += `‚úÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n\n`;
        message += `üìã *–ó–∞–¥–∞—á–∞:* ${data.taskName}\n`;
        message += `üì¶ *–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏:* ${data.supplyId}\n`;
        message += `üîê *ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:* ${data.bookingId}\n`;
        message += `üè¢ *–°–∫–ª–∞–¥:* ${data.slot?.warehouseName}\n`;
        message += `üìÖ *–î–∞—Ç–∞:* ${data.slot?.date}\n\n`;
        message += `üéâ *–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!*`;
        break;

      case 'booking_failed':
        message += `‚ùå *–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n`;
        message += `üìã *–ó–∞–¥–∞—á–∞:* ${data.taskName}\n`;
        message += `üì¶ *–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏:* ${data.supplyId}\n`;
        message += `üè¢ *–°–∫–ª–∞–¥:* ${data.slot?.warehouseName}\n`;
        message += `üìÖ *–î–∞—Ç–∞:* ${data.slot?.date}\n\n`;
        message += `‚ö†Ô∏è *–û—à–∏–±–∫–∞:* ${data.error}`;
        break;

      default:
        message += `üì¢ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n`;
        message += `üìã *–ó–∞–¥–∞—á–∞:* ${data.taskName}\n`;
        break;
    }

    return message;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
   */
  private async sendMessage(chatId: string, message: string): Promise<boolean> {
    try {
      if (!this.botToken) {
        console.log('‚ö†Ô∏è Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return false;
      }

      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'Markdown',
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('–û—à–∏–±–∫–∞ Telegram API:', errorData);
        return false;
      }

      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ
   */
  async notifySlotFound(userId: string, taskId: string, taskName: string, slot: any): Promise<boolean> {
    return this.sendNotification({
      userId,
      type: 'slot_found',
      data: {
        taskId,
        taskName,
        slot: {
          warehouseId: slot.warehouseId,
          warehouseName: slot.warehouseName,
          date: slot.date,
          coefficient: slot.coefficient,
          boxTypes: slot.boxTypes,
        },
      },
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async notifyBookingStarted(userId: string, taskId: string, taskName: string, supplyId: string, slot: any): Promise<boolean> {
    return this.sendNotification({
      userId,
      type: 'booking_started',
      data: {
        taskId,
        taskName,
        supplyId,
        slot: {
          warehouseId: slot.warehouseId,
          warehouseName: slot.warehouseName,
          date: slot.date,
          coefficient: slot.coefficient,
          boxTypes: slot.boxTypes,
        },
      },
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async notifyBookingCompleted(userId: string, taskId: string, taskName: string, supplyId: string, bookingId: string, slot: any): Promise<boolean> {
    return this.sendNotification({
      userId,
      type: 'booking_completed',
      data: {
        taskId,
        taskName,
        supplyId,
        bookingId,
        slot: {
          warehouseId: slot.warehouseId,
          warehouseName: slot.warehouseName,
          date: slot.date,
          coefficient: slot.coefficient,
          boxTypes: slot.boxTypes,
        },
      },
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async notifyBookingFailed(userId: string, taskId: string, taskName: string, supplyId: string, slot: any, error: string): Promise<boolean> {
    return this.sendNotification({
      userId,
      type: 'booking_failed',
      data: {
        taskId,
        taskName,
        supplyId,
        slot: {
          warehouseId: slot.warehouseId,
          warehouseName: slot.warehouseName,
          date: slot.date,
          coefficient: slot.coefficient,
          boxTypes: slot.boxTypes,
        },
        error,
      },
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö
   */
  async notifySlotsFound(userId: string, taskId: string, taskName: string, slots: any[]): Promise<boolean> {
    try {
      const userSettings = await this.getUserTelegramSettings(userId);
      if (!userSettings || !userSettings.chatId) {
        console.log(`‚ö†Ô∏è Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return false;
      }

      let message = `üéØ –ù–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã!\n\n`;
      message += `üìã –ó–∞–¥–∞—á–∞: ${taskName}\n`;
      message += `üìä –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: ${slots.length}\n\n`;

      slots.forEach((slot, index) => {
        message += `üìç –°–ª–æ—Ç ${index + 1}:\n`;
        message += `   üè™ –°–∫–ª–∞–¥: ${slot.warehouseName || `–°–∫–ª–∞–¥ ${slot.warehouseId}`}\n`;
        message += `   üìÖ –î–∞—Ç–∞: ${slot.date}\n`;
        message += `   üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${slot.coefficient}\n`;
        message += `   üì¶ –¢–∏–ø—ã –∫–æ—Ä–æ–±–æ–∫: ${slot.boxTypes.join(', ')}\n\n`;
      });

      message += `üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.`;

      return await this.sendMessage(userSettings.chatId, message);
    } catch (error) {
      console.error('Error sending slots found notification:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
   */
  async notifyBookingSuccess(userId: string, taskId: string, taskName: string, slot: any, bookingId: string): Promise<boolean> {
    try {
      const userSettings = await this.getUserTelegramSettings(userId);
      if (!userSettings || !userSettings.chatId) {
        console.log(`‚ö†Ô∏è Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return false;
      }

      let message = `‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!\n\n`;
      message += `üìã –ó–∞–¥–∞—á–∞: ${taskName}\n`;
      message += `üÜî ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${bookingId}\n\n`;
      message += `üìç –î–µ—Ç–∞–ª–∏ —Å–ª–æ—Ç–∞:\n`;
      message += `   üè™ –°–∫–ª–∞–¥: ${slot.warehouseName || `–°–∫–ª–∞–¥ ${slot.warehouseId}`}\n`;
      message += `   üìÖ –î–∞—Ç–∞: ${slot.date}\n`;
      message += `   üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${slot.coefficient}\n`;
      message += `   üì¶ –¢–∏–ø—ã –∫–æ—Ä–æ–±–æ–∫: ${slot.boxTypes.join(', ')}\n\n`;
      message += `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à —Å–ª–æ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω.`;

      return await this.sendMessage(userSettings.chatId, message);
    } catch (error) {
      console.error('Error sending booking success notification:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async notifyBookingError(userId: string, taskId: string, taskName: string, slot: any, error: string): Promise<boolean> {
    try {
      const userSettings = await this.getUserTelegramSettings(userId);
      if (!userSettings || !userSettings.chatId) {
        console.log(`‚ö†Ô∏è Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return false;
      }

      let message = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞\n\n`;
      message += `üìã –ó–∞–¥–∞—á–∞: ${taskName}\n`;
      message += `‚ùå –û—à–∏–±–∫–∞: ${error}\n\n`;
      message += `üìç –î–µ—Ç–∞–ª–∏ —Å–ª–æ—Ç–∞:\n`;
      message += `   üè™ –°–∫–ª–∞–¥: ${slot.warehouseName || `–°–∫–ª–∞–¥ ${slot.warehouseId}`}\n`;
      message += `   üìÖ –î–∞—Ç–∞: ${slot.date}\n`;
      message += `   üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${slot.coefficient}\n`;
      message += `   üì¶ –¢–∏–ø—ã –∫–æ—Ä–æ–±–æ–∫: ${slot.boxTypes.join(', ')}\n\n`;
      message += `üîÑ –ü–æ–∏—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...`;

      return await this.sendMessage(userSettings.chatId, message);
    } catch (error) {
      console.error('Error sending booking error notification:', error);
      return false;
    }
  }
}
