import { prisma } from './prisma';
import { decrypt } from './encryption';
import { WBClientFactory } from './wb-client';

export interface BookingSlot {
  warehouseId: number;
  warehouseName: string;
  date: string;
  timeSlot: string;
  coefficient: number;
  boxTypes: string[];
  foundAt: Date;
}

export interface BookingResult {
  success: boolean;
  bookingId?: string;
  error?: string;
  details?: any;
}

export class AutoBookingService {
  private userId: string;
  private taskId: string;
  private supplyId: string;

  constructor(userId: string, taskId: string, supplyId: string) {
    this.userId = userId;
    this.taskId = taskId;
    this.supplyId = supplyId;
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞
   */
  async bookSlot(slot: BookingSlot): Promise<BookingResult> {
    try {
      console.log(`üîê –ù–∞—á–∏–Ω–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ ${this.supplyId}`);
      console.log(`üìã –î–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç–∞:`, {
        warehouseId: slot.warehouseId,
        warehouseName: slot.warehouseName,
        date: slot.date,
        coefficient: slot.coefficient,
        boxTypes: slot.boxTypes,
      });

      // 1. –ü–æ–ª—É—á–∞–µ–º WB —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const wbSession = await this.getWBSession();
      if (!wbSession) {
        throw new Error('WB —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB.');
      }

      // 2. –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WB API
      const wbClient = WBClientFactory.createSuppliesClient(wbSession.token);

      // 3. –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ WB API
      const bookingResult = await this.performBooking(wbClient, slot);

      if (bookingResult.success) {
        console.log(`‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω: ${bookingResult.bookingId}`);
        
        // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ COMPLETED
        await this.updateTaskStatus('COMPLETED');
        
        // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        await this.saveBookingResult(slot, bookingResult);
        
        return bookingResult;
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${bookingResult.error}`);
        await this.updateTaskStatus('FAILED');
        return bookingResult;
      }

    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏';
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      
      await this.updateTaskStatus('FAILED');
      
      return {
        success: false,
        error: errorMsg,
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ WB —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async getWBSession(): Promise<{ token: string; cookies: string } | null> {
    try {
      const session = await prisma.wBSession.findFirst({
        where: {
          userId: this.userId,
          isActive: true,
        },
        orderBy: {
          createdAt: 'desc',
        },
      });

      if (!session) {
        return null;
      }

      const decryptedToken = decrypt(session.tokenEncrypted);
      const decryptedCookies = decrypt(session.cookiesEncrypted);

      return {
        token: decryptedToken,
        cookies: decryptedCookies,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è WB —Å–µ—Å—Å–∏–∏:', error);
      return null;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ WB API
   */
  private async performBooking(wbClient: any, slot: BookingSlot): Promise<BookingResult> {
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ WB API –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      // –ü–æ–∫–∞ —á—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      
      console.log(`üîê –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ WB API...`);
      console.log(`üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:`, {
        supplyId: this.supplyId,
        warehouseId: slot.warehouseId,
        date: slot.date,
        coefficient: slot.coefficient,
        boxTypes: slot.boxTypes,
      });

      // –ò–º–∏—Ç–∞—Ü–∏—è API –≤—ã–∑–æ–≤–∞
      await new Promise(resolve => setTimeout(resolve, 2000));

      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
      // const result = await wbClient.bookSlot({
      //   supplyId: this.supplyId,
      //   warehouseId: slot.warehouseId,
      //   date: slot.date,
      //   coefficient: slot.coefficient,
      //   boxTypes: slot.boxTypes,
      // });

      const bookingId = `WB-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

      return {
        success: true,
        bookingId,
        details: {
          supplyId: this.supplyId,
          warehouseId: slot.warehouseId,
          date: slot.date,
          coefficient: slot.coefficient,
          bookedAt: new Date().toISOString(),
        },
      };

    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ API –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è';
      return {
        success: false,
        error: errorMsg,
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
   */
  private async updateTaskStatus(status: 'RUNNING' | 'SUCCESS' | 'FAILED' | 'STOPPED' | 'BOOKING' | 'COMPLETED'): Promise<void> {
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Prisma –∫–ª–∏–µ–Ω—Ç–∞
      // await prisma.task.update({
      //   where: { id: this.taskId },
      //   data: { 
      //     status,
      //     updatedAt: new Date(),
      //   },
      // });
      console.log(`üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ ${this.taskId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${status}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private async saveBookingResult(slot: BookingSlot, result: BookingResult): Promise<void> {
    try {
      await prisma.supplySnapshot.create({
        data: {
          userId: this.userId,
          warehouseId: slot.warehouseId,
          boxTypeId: 2, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ö–æ—Ä–æ–±–∞
          statusName: 'BOOKED',
          supplyDate: new Date(slot.date),
          raw: {
            bookingId: result.bookingId,
            supplyId: this.supplyId,
            warehouseName: slot.warehouseName,
            timeSlot: slot.timeSlot,
            coefficient: slot.coefficient,
            boxTypes: slot.boxTypes,
            bookedAt: new Date().toISOString(),
            taskId: this.taskId,
            details: result.details,
          },
        },
      });

      console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
  }
}