import { prisma } from '../prisma';

export class TelegramService {
  private botToken: string | null = null;
  private prisma: any = null;

  constructor(prismaClient?: any) {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN || null;
    this.prisma = prismaClient;
    
    if (!this.botToken) {
      console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendNotification(userId: string, message: string): Promise<boolean> {
    try {
      if (!this.botToken) {
        console.warn('Telegram bot token not configured');
        return false;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π prisma –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const prismaClient = this.prisma || prisma;
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ NOTIFICATION
      const userSettings = await prismaClient.userSettings.findFirst({
        where: { 
          userId,
          category: 'NOTIFICATION'
        },
      });

      const telegramSettings = userSettings?.settings as any || {};
      const telegramEnabled = telegramSettings.telegram?.enabled || false;
      const telegramChatId = telegramSettings.telegram?.chatId || '';

      if (!telegramEnabled || !telegramChatId) {
        console.warn(`No notification channels configured for user ${userId}`);
        return false;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: telegramChatId,
          text: message,
          parse_mode: 'HTML',
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('Telegram API error:', errorData);
        return false;
      }

      console.log(`Telegram notification sent to user ${userId}`);
      return true;

    } catch (error) {
      console.error('Failed to send Telegram notification:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ
   */
  async sendSlotFoundNotification(userId: string, slotData: any): Promise<boolean> {
    const message = `üéØ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç!\n\n` +
      `üè™ –°–∫–ª–∞–¥: ${slotData.warehouseName} (${slotData.warehouseID})\n` +
      `üì¶ –¢–∏–ø: ${slotData.boxTypeName}\n` +
      `üìÖ –î–∞—Ç–∞: ${slotData.date}\n` +
      `üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${slotData.coefficient}\n` +
      `‚úÖ –†–∞–∑–≥—Ä—É–∑–∫–∞: ${slotData.allowUnload ? '–î–∞' : '–ù–µ—Ç'}\n\n` +
      `üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...`;

    return this.sendNotification(userId, message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
   */
  async sendBookingSuccessNotification(userId: string, bookingData: any): Promise<boolean> {
    const message = `‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!\n\n` +
      `üì¶ ID –ø–æ—Å—Ç–∞–≤–∫–∏: ${bookingData.supplyId}\n` +
      `üè™ –°–∫–ª–∞–¥: ${bookingData.warehouseId}\n` +
      `üì¶ –¢–∏–ø: ${bookingData.boxTypeId}\n` +
      `üìÖ –î–∞—Ç–∞: ${bookingData.date}\n` +
      `üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${bookingData.coefficient}\n` +
      `üÜî ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${bookingData.bookingId}`;

    return this.sendNotification(userId, message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async sendBookingErrorNotification(userId: string, error: string): Promise<boolean> {
    const message = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞!\n\n` +
      `‚ùå –û—à–∏–±–∫–∞: ${error}\n\n` +
      `üîÑ –ü–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç...`;

    return this.sendNotification(userId, message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞
   */
  async sendTemplatedNotification(
    userId: string, 
    templateType: string, 
    variables: Record<string, any> = {}
  ): Promise<boolean> {
    if (!this.botToken) {
      console.warn('‚ö†Ô∏è Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return false;
    }

    const prismaClient = this.prisma || prisma;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userSettings = await prismaClient.userSettings.findFirst({
      where: { 
        userId,
        category: 'NOTIFICATION'
      },
    });

    const telegramSettings = userSettings?.settings as any || {};
    const telegramEnabled = telegramSettings.telegram?.enabled || false;
    const telegramChatId = telegramSettings.telegram?.chatId || '';

    if (!telegramEnabled || !telegramChatId) {
      console.warn(`No notification channels configured for user ${userId}`);
      return false;
    }

    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã)
    let template = null;
    try {
      template = await prismaClient.notificationTemplate.findFirst({
        where: {
          type: templateType,
          isActive: true
        }
      });
    } catch (error) {
      console.warn(`NotificationTemplate table not found, falling back to default message for type: ${templateType}`);
      // Fallback to default message
      const defaultMessage = this.getDefaultMessage(templateType, variables);
      return this.sendNotification(userId, defaultMessage);
    }

    if (!template) {
      console.warn(`Template not found for type: ${templateType}, using default message`);
      const defaultMessage = this.getDefaultMessage(templateType, variables);
      return this.sendNotification(userId, defaultMessage);
    }

    // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–µ
    let message = template.template;
    Object.entries(variables).forEach(([key, value]) => {
      const regex = new RegExp(`{{${key}}}`, 'g');
      message = message.replace(regex, String(value));
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    const now = new Date();
    message = message.replace(/{{date}}/g, now.toLocaleDateString('ru-RU'));
    message = message.replace(/{{time}}/g, now.toLocaleTimeString('ru-RU'));

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: telegramChatId,
          text: message,
          parse_mode: 'HTML',
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', userId, errorData);
        return false;
      }

      console.log('‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', userId, '—Å —à–∞–±–ª–æ–Ω–æ–º', templateType);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', userId, error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private getDefaultMessage(templateType: string, variables: Record<string, any>): string {
    const now = new Date();
    const date = now.toLocaleDateString('ru-RU');
    const time = now.toLocaleTimeString('ru-RU');

    switch (templateType) {
      case 'SLOT_FOUND':
        return `üéØ <b>–°–ª–æ—Ç –Ω–∞–π–¥–µ–Ω!</b>\n\n` +
               `üè™ –°–∫–ª–∞–¥: ${variables.warehouseName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
               `üì¶ –¢–∏–ø: ${variables.boxTypeName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
               `üìÖ –î–∞—Ç–∞: ${variables.date || date}\n` +
               `üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${variables.coefficient || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
               `‚úÖ –†–∞–∑–≥—Ä—É–∑–∫–∞: ${variables.allowUnload ? '–î–∞' : '–ù–µ—Ç'}\n\n` +
               `üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...`;

      case 'BOOKING_SUCCESS':
        return `‚úÖ <b>–°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!</b>\n\n` +
               `üì¶ ID –ø–æ—Å—Ç–∞–≤–∫–∏: ${variables.supplyId || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
               `üè™ –°–∫–ª–∞–¥: ${variables.warehouseName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
               `üì¶ –¢–∏–ø: ${variables.boxTypeName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
               `üìÖ –î–∞—Ç–∞: ${variables.date || date}\n` +
               `üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${variables.coefficient || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`;

      case 'BOOKING_FAILED':
        return `‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞!</b>\n\n` +
               `‚ùå –û—à–∏–±–∫–∞: ${variables.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n\n` +
               `üîÑ –ü–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç...`;

      case 'TASK_STARTED':
        return `üöÄ <b>–ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>\n\n` +
               `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${variables.taskName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
               `‚è∞ –í—Ä–µ–º—è: ${time}\n` +
               `üìÖ –î–∞—Ç–∞: ${date}`;

      case 'TASK_COMPLETED':
        return `‚úÖ <b>–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n` +
               `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${variables.taskName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
               `üéØ –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: ${variables.foundSlots || 0}\n` +
               `üì¶ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${variables.bookedSlots || 0}\n` +
               `‚è∞ –í—Ä–µ–º—è: ${time}`;

      case 'TASK_FAILED':
        return `‚ùå <b>–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞</b>\n\n` +
               `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${variables.taskName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
               `‚ùå –û—à–∏–±–∫–∞: ${variables.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n` +
               `‚è∞ –í—Ä–µ–º—è: ${time}`;

      case 'TASK_STOPPED':
        return `‚èπÔ∏è <b>–ó–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n` +
               `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${variables.taskName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
               `üìù –ü—Ä–∏—á–∏–Ω–∞: ${variables.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
               `‚è∞ –í—Ä–µ–º—è: ${time}`;

      default:
        return `üì¢ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n` +
               `–¢–∏–ø: ${templateType}\n` +
               `‚è∞ –í—Ä–µ–º—è: ${time}\n` +
               `üìÖ –î–∞—Ç–∞: ${date}`;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async isNotificationConfigured(userId: string): Promise<boolean> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π prisma –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const prismaClient = this.prisma || prisma;
      
      const userSettings = await prismaClient.userSettings.findFirst({
        where: { 
          userId,
          category: 'NOTIFICATION'
        },
      });

      const telegramSettings = userSettings?.settings as any || {};
      const telegramEnabled = telegramSettings.telegram?.enabled || false;
      const telegramChatId = telegramSettings.telegram?.chatId || '';

      return !!(telegramEnabled && telegramChatId);
    } catch (error) {
      console.error('Failed to check notification settings:', error);
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const telegramService = new TelegramService();
