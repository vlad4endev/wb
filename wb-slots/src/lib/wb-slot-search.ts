import { WBClientFactory } from './wb-client';
import { prisma } from './prisma';
import { decrypt } from './encryption';
import { AutoBookingService } from './auto-booking-service';
import { TelegramService } from './telegram-service';
// import { TaskStatus } from '@prisma/client';

export interface SlotSearchConfig {
  userId: string;
  taskId: string;
  warehouseIds: number[];
  boxTypeIds: number[];
  coefficientMin: number;
  coefficientMax: number;
  dateFrom: string;
  dateTo: string;
  stopOnFirstFound: boolean;
  isSortingCenter?: boolean;
  autoBook?: boolean;
  autoBookSupplyId?: string;
  taskName?: string;
  runId?: string; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π runId –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
}

export interface FoundSlot {
  warehouseId: number;
  warehouseName: string;
  date: string;
  timeSlot: string;
  coefficient: number;
  isAvailable: boolean;
  boxTypes: string[];
  foundAt: Date;
}

export interface SearchResult {
  foundSlots: FoundSlot[];
  totalChecked: number;
  searchTime: number;
  errors: string[];
  stoppedEarly: boolean;
}

export class WBSlotSearch {
  private suppliesClient: any;
  private userId: string;
  private taskId: string;
  private config: SlotSearchConfig;
  private isSearching: boolean = false;
  private previousData: any[] = []; // –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  private lastRequestTime: number = 0;
  private rateLimitCount: number = 0;

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞
  private readonly maxAttemptsPerMinute = 6; // –ú–∞–∫—Å–∏–º—É–º 6 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
  private readonly minRequestInterval = 10000; // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
  private readonly maxRateLimitAttempts = 5; // –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ 429
  private readonly rateLimitDelay = 90000; // 90 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ 429
  private readonly maxExecutionTime = 3 * 24 * 60 * 60 * 1000; // 3 –¥–Ω—è

  constructor(config: SlotSearchConfig) {
    this.config = config;
    this.userId = config.userId;
    this.taskId = config.taskId;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤ —Å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –¥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
   */
  async searchSlots(): Promise<SearchResult> {
    const startTime = Date.now();
    const foundSlots: FoundSlot[] = [];
    const errors: string[] = [];
    let totalChecked = 0;
    let stoppedEarly = false;
    let runId: string | null = this.config.runId || null;

    try {
      // 1. –°–æ–∑–¥–∞–µ–º Run –∑–∞–ø–∏—Å—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω runId)
      if (!runId) {
        const run = await prisma.run.create({
          data: {
            taskId: this.taskId,
            userId: this.userId,
            status: 'RUNNING' as any,
            startedAt: new Date(),
          },
        });
        runId = run.id;
        console.log(`üìù –°–æ–∑–¥–∞–Ω–∞ Run –∑–∞–ø–∏—Å—å: ${runId}`);
      } else {
        console.log(`üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é Run –∑–∞–ø–∏—Å—å: ${runId}`);
      }

      // 2. –ü–æ–ª—É—á–∞–µ–º WB API —Ç–æ–∫–µ–Ω
      const userToken = await this.getUserWBToken();
      if (!userToken) {
        throw new Error('WB API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
      }

      console.log(`üîë WB API —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${userToken.substring(0, 10)}...`);

      // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
      this.suppliesClient = WBClientFactory.createSuppliesClient(userToken);

      // 3. –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫
      this.isSearching = true;
      console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ ${this.taskId}`);
      console.log(`‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞:`, {
        userId: this.userId,
        taskId: this.taskId,
        warehouseIds: this.config.warehouseIds,
        boxTypeIds: this.config.boxTypeIds,
        coefficientMin: this.config.coefficientMin,
        coefficientMax: this.config.coefficientMax,
        dateFrom: this.config.dateFrom,
        dateTo: this.config.dateTo,
        stopOnFirstFound: this.config.stopOnFirstFound
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.logMessage('INFO', '–ü–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω', {
        config: {
          warehouseIds: this.config.warehouseIds,
          boxTypeIds: this.config.boxTypeIds,
          coefficientMin: this.config.coefficientMin,
          coefficientMax: this.config.coefficientMax,
          dateFrom: this.config.dateFrom,
          dateTo: this.config.dateTo,
          stopOnFirstFound: this.config.stopOnFirstFound,
          autoBook: this.config.autoBook,
          autoBookSupplyId: this.config.autoBookSupplyId,
        }
      }, runId);

      // 4. –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤ –¥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      let searchCycles = 0;
      const maxSearchCycles = Math.ceil(this.maxExecutionTime / this.minRequestInterval); // –ú–∞–∫—Å–∏–º—É–º —Ü–∏–∫–ª–æ–≤ –∑–∞ 3 –¥–Ω—è

      while (this.isSearching && searchCycles < maxSearchCycles) {
        searchCycles++;
        console.log(`üîÑ –¶–∏–∫–ª –ø–æ–∏—Å–∫–∞ ${searchCycles}/${maxSearchCycles}`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø–æ–∏—Å–∫–∞
        await this.logMessage('INFO', `–ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø–æ–∏—Å–∫–∞ ${searchCycles}/${maxSearchCycles}`, {
          cycle: searchCycles,
          maxCycles: maxSearchCycles,
          isSearching: this.isSearching,
          timestamp: new Date().toISOString()
        }, runId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∏—Å–∫
        if (!this.isSearching) {
          console.log('‚èπÔ∏è –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
          await this.logMessage('INFO', '–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', undefined, runId);
          stoppedEarly = true;
          break;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (3 –¥–Ω—è)
        if (Date.now() - startTime > this.maxExecutionTime) {
          console.log('‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (3 –¥–Ω—è), –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
          await this.logMessage('WARN', '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (3 –¥–Ω—è)', undefined, runId);
          break;
        }

        // –ò—â–µ–º —Å–ª–æ—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∫–ª–∞–¥—É —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–æ–≤
        for (const warehouseId of this.config.warehouseIds) {
          if (!this.isSearching) break;

          try {
            console.log(`üîç –ü–æ–∏—Å–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ ${warehouseId} (—Ü–∏–∫–ª ${searchCycles})`);
            
            // –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (6 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
            const timeSinceLastRequest = Date.now() - this.lastRequestTime;
            if (timeSinceLastRequest < this.minRequestInterval) {
              const waitTime = this.minRequestInterval - timeSinceLastRequest;
              console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${waitTime}ms –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ ${this.maxAttemptsPerMinute} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É`);
              await this.delay(waitTime);
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Å–∫–ª–∞–¥–∞
            const coefficients = await this.suppliesClient.getCoefficients([warehouseId], this.config.dateFrom, this.config.dateTo, this.config.isSortingCenter);

            this.lastRequestTime = Date.now();
            totalChecked += coefficients.length;

            console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∫–ª–∞–¥–∞ ${warehouseId}: ${coefficients.length}`);
            
            // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            const requestDetails: any = {
              warehouseId,
              dateFrom: this.config.dateFrom,
              dateTo: this.config.dateTo,
              isSortingCenter: this.config.isSortingCenter,
              coefficientsCount: coefficients.length,
              timestamp: new Date().toISOString(),
              requestUrl: 'https://supplies-api.wildberries.ru/api/v1/acceptance/coefficients',
              requestMethod: 'GET',
              parameters: {
                warehouseIDs: warehouseId.toString(),
                dateFrom: this.config.dateFrom,
                dateTo: this.config.dateTo,
                isSortingCenter: this.config.isSortingCenter
              }
            };

            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if (coefficients.length > 0) {
              const coefficientStats = {
                min: Math.min(...coefficients.map((c: any) => c.coefficient)),
                max: Math.max(...coefficients.map((c: any) => c.coefficient)),
                avg: coefficients.reduce((sum: number, c: any) => sum + c.coefficient, 0) / coefficients.length,
                available: coefficients.filter((c: any) => c.allowUnload).length,
                total: coefficients.length
              };
              requestDetails.coefficientStats = coefficientStats;
              
              // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞
              requestDetails.sampleData = coefficients[0];
            }

            await this.logMessage('DEBUG', `–ü–æ–ª—É—á–µ–Ω–æ ${coefficients.length} –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∫–ª–∞–¥–∞ ${warehouseId}`, requestDetails, runId);

            // –í—ã—è–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã
            const newSlots = this.detectNewSlots(coefficients, this.previousData);
            this.previousData = [...coefficients]; // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ

            console.log(`üÜï –ù–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${newSlots.length}`);
            await this.logMessage('DEBUG', `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${newSlots.length} –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤`, undefined, runId);

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WB API
            const filteredSlots = this.filterSlots(newSlots);

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–∞ WB API
            for (const slot of filteredSlots) {
              if (!this.isSearching) break;

              const foundSlot: FoundSlot = {
                warehouseId: slot.warehouseID,
                warehouseName: slot.warehouseName || `–°–∫–ª–∞–¥ ${slot.warehouseID}`,
                date: slot.date,
                timeSlot: this.formatTimeSlot(slot.date),
                coefficient: slot.coefficient,
                isAvailable: slot.allowUnload === true,
                boxTypes: [slot.boxTypeName || `Type ${slot.boxTypeID}`],
                foundAt: new Date(),
              };

              foundSlots.push(foundSlot);
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–ª–æ—Ç: ${foundSlot.warehouseName} - ${foundSlot.date} (–∫–æ—ç—Ñ: ${foundSlot.coefficient}, —Ç–∏–ø: ${slot.boxTypeName})`);
              await this.logMessage('INFO', `–ù–∞–π–¥–µ–Ω —Å–ª–æ—Ç: ${foundSlot.warehouseName} - ${foundSlot.date} (–∫–æ—ç—Ñ: ${foundSlot.coefficient})`, {
                slot: foundSlot
              }, runId);

              // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
              if (this.config.stopOnFirstFound) {
                stoppedEarly = true;
                this.isSearching = false; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
                await this.logMessage('INFO', '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—Ç–∞', undefined, runId);
                break;
              }
            }

            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–ª–æ—Ç—ã –∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
            if (foundSlots.length > 0 && !this.config.stopOnFirstFound) {
              console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${foundSlots.length} —Å–ª–æ—Ç–æ–≤, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫...`);
            }

          } catch (error) {
            const errorMsg = `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ ${warehouseId}: ${error instanceof Error ? error.message : error}`;
            console.error(errorMsg);
            errors.push(errorMsg);

            // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ API
            await this.logMessage('ERROR', `–û—à–∏–±–∫–∞ API –¥–ª—è —Å–∫–ª–∞–¥–∞ ${warehouseId}`, {
              warehouseId,
              error: error instanceof Error ? error.message : String(error),
              errorType: error instanceof Error ? error.constructor.name : typeof error,
              status: (error as any).status,
              response: (error as any).response?.data,
              timestamp: new Date().toISOString(),
              requestParams: {
                dateFrom: this.config.dateFrom,
                dateTo: this.config.dateTo,
                isSortingCenter: this.config.isSortingCenter
              }
            }, runId);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
            if ((error as any).status === 429) {
              if (this.rateLimitCount >= this.maxRateLimitAttempts) {
                console.log(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (${this.maxRateLimitAttempts}) –ø—Ä–∏ –æ—à–∏–±–∫–µ 429`);
                await this.logMessage('WARN', `–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ 429`, {
                  rateLimitCount: this.rateLimitCount,
                  maxRateLimitAttempts: this.maxRateLimitAttempts
                }, runId);
                this.isSearching = false;
                break;
              }
              console.log(`‚è≥ –û—à–∏–±–∫–∞ 429: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ ${this.rateLimitDelay}ms`);
              await this.logMessage('WARN', `–û—à–∏–±–∫–∞ 429 (Rate Limit). –û–∂–∏–¥–∞–Ω–∏–µ ${this.rateLimitDelay}ms`, {
                rateLimitCount: this.rateLimitCount,
                waitTime: this.rateLimitDelay
              }, runId);
              await this.delay(this.rateLimitDelay);
              this.rateLimitCount++;
            } else if ([400, 401, 403].includes((error as any).status)) {
              console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API (—Å—Ç–∞—Ç—É—Å ${(error as any).status}):`, (error as any).message);
              await this.logMessage('ERROR', `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API (—Å—Ç–∞—Ç—É—Å ${(error as any).status})`, {
                status: (error as any).status,
                message: (error as any).message,
                warehouseId
              }, runId);
              this.isSearching = false;
              break;
            } else {
              const delay = this.getExponentialBackoffDelay(errors.length);
              console.log(`‚è≥ –û—à–∏–±–∫–∞, –æ–∂–∏–¥–∞–Ω–∏–µ ${delay}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π`);
              await this.logMessage('WARN', `–û—à–∏–±–∫–∞ API, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}ms`, {
                delay,
                errorCount: errors.length,
                warehouseId
              }, runId);
              await this.delay(delay);
            }
          }
        }

        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–ª–æ—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–º, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        if (foundSlots.length > 0 && this.config.stopOnFirstFound) {
          console.log(`üéØ –ù–∞–π–¥–µ–Ω –Ω—É–∂–Ω—ã–π —Å–ª–æ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞`);
          break;
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –ø–æ–∏—Å–∫–∞
        if (this.isSearching) {
          console.log(`‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –ø–æ–∏—Å–∫–∞...`);
          await this.delay(5000); // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
        }
      }

      // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É
      await this.saveSearchResults(foundSlots);

      // 6. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–æ—Ç—ã –∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ-–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      if (foundSlots.length > 0 && this.config.autoBook && this.config.autoBookSupplyId) {
        console.log(`üîê –ù–∞–π–¥–µ–Ω—ã —Å–ª–æ—Ç—ã, –Ω–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ-–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ BOOKING
        await this.updateTaskStatus('BOOKING', runId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ
        const telegramService = new TelegramService();
        await telegramService.notifySlotFound(
          this.userId,
          this.taskId,
          this.config.taskName || '–ó–∞–¥–∞—á–∞',
          foundSlots[0]
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        await telegramService.notifyBookingStarted(
          this.userId,
          this.taskId,
          this.config.taskName || '–ó–∞–¥–∞—á–∞',
          this.config.autoBookSupplyId,
          foundSlots[0]
        );
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ-–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        const bookingService = new AutoBookingService(
          this.userId,
          this.taskId,
          this.config.autoBookSupplyId
        );
        
        const bookingResult = await bookingService.bookSlot(foundSlots[0]);
        
        if (bookingResult.success) {
          console.log(`‚úÖ –ê–≤—Ç–æ-–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${bookingResult.bookingId}`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          await telegramService.notifyBookingCompleted(
            this.userId,
            this.taskId,
            this.config.taskName || '–ó–∞–¥–∞—á–∞',
            this.config.autoBookSupplyId,
            bookingResult.bookingId!,
            foundSlots[0]
          );
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ COMPLETED
          await this.updateTaskStatus('COMPLETED', runId);
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${bookingResult.error}`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          await telegramService.notifyBookingFailed(
            this.userId,
            this.taskId,
            this.config.taskName || '–ó–∞–¥–∞—á–∞',
            this.config.autoBookSupplyId,
            foundSlots[0],
            bookingResult.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
          );
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ FAILED
          await this.updateTaskStatus('FAILED', runId);
        }
      } else {
        // 7. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ (–±–µ–∑ –∞–≤—Ç–æ-–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
        await this.updateTaskStatus(foundSlots.length > 0 ? 'SUCCESS' : 'FAILED', runId);
      }

      console.log(`‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: ${foundSlots.length}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å Run –∑–∞–ø–∏—Å–∏
      if (runId) {
        await prisma.run.update({
          where: { id: runId },
          data: {
            status: foundSlots.length > 0 ? 'SUCCESS' : 'FAILED',
            finishedAt: new Date(),
            foundSlots: foundSlots.length,
            summary: {
              foundSlots: foundSlots.length,
              totalChecked,
              searchTime: Date.now() - startTime,
              errors,
              stoppedEarly,
            } as any,
          },
        });
      }

      return {
        foundSlots,
        totalChecked,
        searchTime: Date.now() - startTime,
        errors,
        stoppedEarly,
      };

    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤:', error);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ FAILED
      await this.updateTaskStatus('FAILED', runId || undefined);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å Run –∑–∞–ø–∏—Å–∏
      if (runId) {
        await prisma.run.update({
          where: { id: runId },
          data: {
            status: 'FAILED',
            finishedAt: new Date(),
            foundSlots: 0,
            summary: {
              error: errorMsg,
              foundSlots: 0,
              totalChecked,
              searchTime: Date.now() - startTime,
              errors: [errorMsg],
              stoppedEarly: false,
            } as any,
          },
        });
      }
      
      return {
        foundSlots,
        totalChecked,
        searchTime: Date.now() - startTime,
        errors: [errorMsg],
        stoppedEarly: false,
      };
    } finally {
      this.isSearching = false;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞
   */
  stopSearch(): void {
    this.isSearching = false;
    console.log('‚èπÔ∏è –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
   */
  private async updateTaskStatus(status: 'RUNNING' | 'SUCCESS' | 'FAILED' | 'STOPPED' | 'BOOKING' | 'COMPLETED', runId?: string): Promise<void> {
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Prisma –∫–ª–∏–µ–Ω—Ç–∞
      // await prisma.task.update({
      //   where: { id: this.taskId },
      //   data: { 
      //     status,
      //     updatedAt: new Date(),
      //   },
      // });
      console.log(`üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ ${this.taskId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${status}`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      await this.logMessage('INFO', `–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${status}`, undefined, runId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', error);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  private async logMessage(level: 'DEBUG' | 'INFO' | 'WARN' | 'ERROR', message: string, meta?: any, runId?: string): Promise<void> {
    try {
      let targetRunId = runId;
      
      // –ï—Å–ª–∏ runId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
      if (!targetRunId) {
        const activeRun = await prisma.run.findFirst({
          where: {
            taskId: this.taskId,
            status: 'RUNNING',
          },
          orderBy: {
            startedAt: 'desc',
          },
        });
        targetRunId = activeRun?.id;
      }

      if (targetRunId) {
        await prisma.runLog.create({
          data: {
            runId: targetRunId,
            level,
            message,
            meta: meta ? JSON.stringify(meta) : undefined,
          },
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ WB API —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async getUserWBToken(): Promise<string | null> {
    try {
      const token = await prisma.userToken.findFirst({
        where: {
          userId: this.userId,
          category: 'SUPPLIES',
          isActive: true,
        },
      });

      if (!token) return null;

      return decrypt(token.tokenEncrypted);
    } catch (error) {
      console.error('Error getting user WB token:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞
   */
  private async getSearchSettings(): Promise<any> {
    try {
      const settings = await prisma.userSettings.findFirst({
        where: {
          userId: this.userId,
          category: 'SEARCH',
        },
      });

      if (!settings) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
          checkInterval: 10, // 10 —Å–µ–∫—É–Ω–¥
          maxAttempts: 100,
          apiRateLimit: 6,
          stopOnFirstFound: true,
        };
      }

      return settings.settings;
    } catch (error) {
      console.error('Error getting search settings:', error);
      return {
        checkInterval: 10,
        maxAttempts: 100,
        apiRateLimit: 6,
        stopOnFirstFound: true,
      };
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–æ—Ç–∞ –∏–∑ –¥–∞—Ç—ã
   */
  private formatTimeSlot(dateString: string): string {
    try {
      const date = new Date(dateString);
      const timeString = date.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit',
        timeZone: 'Europe/Moscow'
      });
      return timeString || '09:00-18:00';
    } catch (error) {
      return '09:00-18:00'; // –í—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∫–æ—Ä–æ–±–æ–∫ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
   */
  private getBoxTypes(apiBoxTypes: any[]): string[] {
    const boxTypeMap: { [key: number]: string } = {
      2: '–ö–æ—Ä–æ–±–∞',
      5: '–ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã',
      6: '–°—É–ø–µ—Ä—Å–µ–π—Ñ',
    };

    return apiBoxTypes
      .filter(bt => bt.available)
      .map(bt => boxTypeMap[bt.id] || `Type ${bt.id}`);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
   */
  private async saveSearchResults(slots: FoundSlot[]): Promise<void> {
    try {
      if (slots.length === 0) return;

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö
      const slotData = slots.map(slot => ({
        userId: this.userId,
        warehouseId: slot.warehouseId,
        boxTypeId: 2, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ö–æ—Ä–æ–±–∞, –º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –∏–∑ slot.boxTypes
        statusName: 'FOUND',
        supplyDate: new Date(slot.date),
        raw: {
          warehouseName: slot.warehouseName,
          timeSlot: slot.timeSlot,
          coefficient: slot.coefficient,
          boxTypes: slot.boxTypes,
          foundAt: slot.foundAt.toISOString(),
          searchTaskId: this.taskId,
        },
      }));

      await prisma.supplySnapshot.createMany({
        data: slotData,
      });

      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${slots.length} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤`);

    } catch (error) {
      console.error('Error saving search results:', error);
    }
  }


  /**
   * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤
   */
  private detectNewSlots(currentData: any[], previousData: any[]): any[] {
    console.log(`üîç detectNewSlots: currentData.length = ${currentData?.length || 0}, previousData.length = ${previousData?.length || 0}`);
    
    if (!Array.isArray(currentData) || currentData.length === 0) {
      console.log(`‚ö†Ô∏è detectNewSlots: currentData –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤`);
      return [];
    }

    if (!previousData || previousData.length === 0) {
      console.log(`‚úÖ detectNewSlots: previousData –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ currentData`);
      return currentData;
    }

    const normalizeDate = (dateStr: string): number => {
      try {
        return new Date(dateStr).getTime();
      } catch {
        return 0;
      }
    };

    const newSlots = currentData.filter(current => {
      const isNew = !previousData.some(prev =>
        prev.warehouseID === current.warehouseID &&
        prev.boxTypeID === current.boxTypeID &&
        normalizeDate(prev.date) === normalizeDate(current.date) &&
        prev.coefficient === current.coefficient
      );
      return isNew;
    });

    console.log(`üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤: ${newSlots.length}`);
    return newSlots;
  }

  /**
   * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WB API
   */
  private filterSlots(slots: any[]): any[] {
    console.log(`üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WB API`);
    console.log(`üìã –í—Ö–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${slots.length}`);
    console.log(`‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:`, {
      warehouseIds: this.config.warehouseIds,
      boxTypeIds: this.config.boxTypeIds,
      coefficientMin: this.config.coefficientMin,
      coefficientMax: this.config.coefficientMax,
      dateFrom: this.config.dateFrom,
      dateTo: this.config.dateTo
    });

    const filteredSlots = slots.filter((item, index) => {
      console.log(`üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ—Ç–∞ ${index + 1}/${slots.length}:`, {
        warehouseID: item.warehouseID,
        boxTypeID: item.boxTypeID,
        boxTypeName: item.boxTypeName,
        coefficient: item.coefficient,
        allowUnload: item.allowUnload,
        date: item.date
      });
      
      if (!item || typeof item !== 'object') {
        console.log(`‚ùå –°–ª–æ—Ç ${index + 1}: –Ω–µ –æ–±—ä–µ–∫—Ç –∏–ª–∏ null`);
        return false;
      }
      
      const itemDate = item.date ? new Date(item.date).toISOString().split('T')[0] : null;
      const start = new Date(this.config.dateFrom);
      const end = new Date(this.config.dateTo);
      const itemTime = itemDate ? new Date(itemDate) : null;
      
      const reasons = [];
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: coefficient === 0 || coefficient === 1
      // –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç -1) –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç -1 –¥–æ 0
      if (this.config.coefficientMin === -1) {
        // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ—Ç -1 –¥–æ 0
        if (item.coefficient < -1 || item.coefficient > 0) {
          reasons.push(`–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${item.coefficient} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ -1 –¥–æ 0 (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)`);
        }
      } else {
        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ 0 –∏–ª–∏ 1
        if (item.coefficient !== 0 && item.coefficient !== 1) {
          reasons.push(`–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${item.coefficient} –Ω–µ —Ä–∞–≤–µ–Ω 0 –∏–ª–∏ 1 (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ WB API)`);
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ allowUnload —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: allowUnload === true
      // –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç -1) –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É
      if (this.config.coefficientMin !== -1 && item.allowUnload !== true) {
        reasons.push(`allowUnload: ${item.allowUnload} –Ω–µ —Ä–∞–≤–µ–Ω true (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ WB API)`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–ª–∞–¥–∞
      if (!this.config.warehouseIds.includes(item.warehouseID)) {
        reasons.push(`—Å–∫–ª–∞–¥: ${item.warehouseID} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞–≤–∫–∏
      if (!this.config.boxTypeIds.includes(item.boxTypeID)) {
        reasons.push(`—Ç–∏–ø_–ø–æ—Å—Ç–∞–≤–∫–∏: ${item.boxTypeID} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
      if (itemDate && itemTime && (itemTime < start || itemTime > end)) {
        reasons.push(`–¥–∞—Ç–∞: ${itemDate} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ${this.config.dateFrom} - ${this.config.dateTo}`);
      }
      
      const matches = reasons.length === 0;
      console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ—Ç–∞ ${index + 1}:`, { 
        item: { 
          warehouseID: item.warehouseID, 
          date: item.date, 
          coefficient: item.coefficient,
          allowUnload: item.allowUnload,
          boxTypeID: item.boxTypeID,
          boxTypeName: item.boxTypeName
        }, 
        matches: matches ? '‚úÖ –ü–†–û–®–ï–õ' : '‚ùå –ù–ï –ü–†–û–®–ï–õ', 
        reasons: reasons.length > 0 ? reasons : '–í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã' 
      });
      
      return matches;
    }).sort((a, b) => a.coefficient - b.coefficient); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞

    console.log(`‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Å–ª–æ—Ç–æ–≤: ${filteredSlots.length}`);
    return filteredSlots;
  }

  /**
   * –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (–∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞)
   */
  private getExponentialBackoffDelay(attempt: number): number {
    return Math.min(60000, this.minRequestInterval * Math.pow(2, attempt - 1));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–∏–∫–æ–≤—ã–º (–∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞)
   */
  private isPeakTime(): boolean {
    const now = new Date();
    const moscowTime = new Date(now.toLocaleString('en-US', { timeZone: 'Europe/Moscow' }));
    const hours = moscowTime.getHours();
    const minutes = moscowTime.getMinutes();
    const isPeak = (
      (hours === 9 && minutes >= 0 && minutes <= 10) ||
      (hours === 12 && minutes >= 0 && minutes <= 10) ||
      (hours === 16 && minutes >= 0 && minutes <= 10)
    );
    console.log(`üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö: ${moscowTime.toLocaleTimeString()}. –ü–∏–∫? ${isPeak}`);
    return isPeak;
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}
