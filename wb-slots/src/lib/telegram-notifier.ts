import { FoundSlot } from './wb-slot-search';

export interface TelegramConfig {
  botToken: string;
  chatId: string;
}

export interface NotificationResult {
  success: boolean;
  error?: string;
  messageId?: string;
}

export class TelegramNotifier {
  private config: TelegramConfig;

  constructor(config: TelegramConfig) {
    this.config = config;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö
   */
  async sendSlotsFoundNotification(slots: FoundSlot[]): Promise<NotificationResult> {
    if (!slots || slots.length === 0) {
      return { success: false, error: '–ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏' };
    }

    const message = this.formatSlotsMessage(slots);
    return await this.sendMessage(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  async sendErrorNotification(error: string): Promise<NotificationResult> {
    const message = `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤: ${error}`;
    return await this.sendMessage(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞
   */
  async sendCompletionNotification(foundSlots: number, totalChecked: number, searchTime: number): Promise<NotificationResult> {
    const message = `‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω\n` +
      `–ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: ${foundSlots}\n` +
      `–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${totalChecked}\n` +
      `–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${Math.round(searchTime / 1000)} —Å–µ–∫—É–Ω–¥`;
    
    return await this.sendMessage(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async sendBookingNotification(slots: FoundSlot[]): Promise<NotificationResult> {
    if (!slots || slots.length === 0) {
      return { success: false, error: '–ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏' };
    }

    const message = this.formatSlotsMessage(slots);
    return await this.sendMessageWithButton(message);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö
   */
  private formatSlotsMessage(slots: FoundSlot[]): string {
    const header = `üéØ –ù–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã (${slots.length}):\n\n`;
    
    const slotsText = slots.map((slot, index) => {
      const date = new Date(slot.date).toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: '2-digit'
      });
      
      return `${index + 1}. ${slot.warehouseName}\n` +
             `   üìÖ ${date} ${slot.timeSlot}\n` +
             `   üì¶ ${slot.boxTypes.join(', ')}\n` +
             `   üî¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${slot.coefficient}\n`;
    }).join('\n');

    return header + slotsText;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private async sendMessage(text: string): Promise<NotificationResult> {
    try {
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram. chatId: ${this.config.chatId}`);
      
      if (!this.config.chatId || isNaN(Number(this.config.chatId)) || this.config.chatId.toString().trim() === "") {
        console.warn('‚ùå –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: chatId –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:', this.config.chatId);
        return { success: false, error: 'chatId –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' };
      }

      const response = await fetch(`https://api.telegram.org/bot${this.config.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: this.config.chatId,
          text: text,
          parse_mode: 'HTML',
        }),
      });

      const data = await response.json();

      if (data.ok) {
        console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:`, data);
        return { success: true, messageId: data.result.message_id };
      } else {
        console.warn(`‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:`, data);
        return { success: false, error: `Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${data.description || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
      return { success: false, error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
   */
  private async sendMessageWithButton(text: string): Promise<NotificationResult> {
    try {
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –≤ Telegram. chatId: ${this.config.chatId}`);
      
      if (!this.config.chatId || isNaN(Number(this.config.chatId)) || this.config.chatId.toString().trim() === "") {
        console.warn('‚ùå –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: chatId –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:', this.config.chatId);
        return { success: false, error: 'chatId –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' };
      }

      const response = await fetch(`https://api.telegram.org/bot${this.config.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: this.config.chatId,
          text: text,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üöÄ –ë–†–û–ù–ò–†–û–í–ê–¢–¨",
                  url: "https://seller.wildberries.ru/supplies-management/all-supplies"
                }
              ]
            ]
          }
        }),
      });

      const data = await response.json();

      if (data.ok) {
        console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:`, data);
        return { success: true, messageId: data.result.message_id };
      } else {
        console.warn(`‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –≤ Telegram:`, data);
        return { success: false, error: `Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${data.description || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –≤ Telegram:', error);
      return { success: false, error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  static validateConfig(config: TelegramConfig): { valid: boolean; error?: string } {
    if (!config.botToken || config.botToken.trim() === '') {
      return { valid: false, error: '–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' };
    }

    if (!config.chatId || config.chatId.trim() === '') {
      return { valid: false, error: 'Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω' };
    }

    if (isNaN(Number(config.chatId))) {
      return { valid: false, error: 'Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º' };
    }

    return { valid: true };
  }
}
