import { Worker, Job } from 'bullmq';
import { WBSlotSearch, SlotSearchConfig } from '@/lib/wb-slot-search';
import { TelegramNotifier } from '@/lib/telegram-notifier';
import { prisma } from '@/lib/prisma';

interface SlotSearchJobData {
  searchConfig: SlotSearchConfig;
  priority: number;
}

export class SlotSearchWorker {
  private worker: Worker;

  constructor(connection: any) {
    this.worker = new Worker(
      'slot-search',
      this.processJob.bind(this),
      {
        connection,
        concurrency: 2, // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ 2 –∑–∞–¥–∞—á –ø–æ–∏—Å–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        removeOnComplete: 10,
        removeOnFail: 5,
      }
    );

    this.worker.on('completed', this.onJobCompleted.bind(this));
    this.worker.on('failed', this.onJobFailed.bind(this));
    this.worker.on('error', this.onWorkerError.bind(this));
  }

  private async processJob(job: Job<SlotSearchJobData>) {
    const { searchConfig, priority } = job.data;

    console.log(`üîç –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ ${searchConfig.taskId}`);

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
      await this.updateTaskStatus(searchConfig.taskId, 'RUNNING');

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—É—Å–∫–µ
      const run = await prisma.run.create({
        data: {
          taskId: searchConfig.taskId,
          userId: searchConfig.userId,
          status: 'RUNNING',
          startedAt: new Date(),
        },
      });

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤
      const slotSearch = new WBSlotSearch(searchConfig);
      const result = await slotSearch.searchSlots();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–æ—Ç—ã
      if (result.foundSlots.length > 0) {
        await this.sendTelegramNotifications(searchConfig.userId, result.foundSlots);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
      const finalStatus = result.foundSlots.length > 0 ? 'SUCCESS' : 'FAILED';
      await this.updateTaskStatus(searchConfig.taskId, finalStatus);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—É—Å–∫–µ
      await prisma.run.update({
        where: { id: run.id },
        data: {
          status: finalStatus,
          finishedAt: new Date(),
          foundSlots: result.foundSlots.length,
          summary: {
            foundSlots: result.foundSlots.length,
            totalChecked: result.totalChecked,
            searchTime: result.searchTime,
            stoppedEarly: result.stoppedEarly,
            errors: result.errors,
          },
        },
      });

      // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏
      await this.createRunLogs(run.id, result);

      console.log(`‚úÖ –ü–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ ${searchConfig.taskId}. –ù–∞–π–¥–µ–Ω–æ: ${result.foundSlots.length}`);
      return result;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ ${searchConfig.taskId}:`, error);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ—à–∏–±–∫–∞"
      await this.updateTaskStatus(searchConfig.taskId, 'FAILED');
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ—à–∏–±–∫–µ
      await prisma.runLog.create({
        data: {
          runId: searchConfig.taskId, // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º taskId
          level: 'ERROR',
          message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          meta: { error: error },
        },
      });

      throw error;
    }
  }

  private async updateTaskStatus(taskId: string, status: 'RUNNING' | 'SUCCESS' | 'FAILED') {
    try {
      await prisma.task.update({
        where: { id: taskId },
        data: { 
          enabled: status === 'SUCCESS' ? true : false,
        },
      });
    } catch (error) {
      console.error('Error updating task status:', error);
    }
  }

  private async createRunLogs(runId: string, result: any) {
    try {
      const logs = [
        {
          runId,
          level: 'INFO' as const,
          message: `–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: ${result.totalChecked}`,
          meta: { totalChecked: result.totalChecked },
        },
        {
          runId,
          level: 'INFO' as const,
          message: `–ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: ${result.foundSlots.length}`,
          meta: { foundSlots: result.foundSlots.length },
        },
        {
          runId,
          level: 'INFO' as const,
          message: `–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: ${Math.round(result.searchTime / 1000)} —Å–µ–∫—É–Ω–¥`,
          meta: { searchTime: result.searchTime },
        },
      ];

      if (result.stoppedEarly) {
        logs.push({
          runId,
          level: 'INFO' as const,
          message: '–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ',
          meta: { stoppedEarly: true },
        });
      }

      if (result.errors.length > 0) {
        logs.push({
          runId,
          level: 'ERROR' as const,
          message: `–û—à–∏–±–∫–∏: ${result.errors.join(', ')}`,
          meta: { errors: result.errors },
        });
      }

      await prisma.runLog.createMany({
        data: logs,
      });
    } catch (error) {
      console.error('Error creating run logs:', error);
    }
  }

  private onJobCompleted(job: Job<SlotSearchJobData>) {
    console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤ ${job.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
  }

  private onJobFailed(job: Job<SlotSearchJobData> | undefined, error: Error) {
    console.error(`‚ùå –ó–∞–¥–∞—á–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤ ${job?.id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:`, error);
  }

  private onWorkerError(error: Error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤:', error);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
   */
  private async sendTelegramNotifications(userId: string, foundSlots: any[]): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const telegramSettings = await prisma.userSettings.findFirst({
        where: {
          userId,
          category: 'TELEGRAM',
        },
      });

      if (!telegramSettings) {
        console.log('üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId);
        return;
      }

      const { botToken, chatId } = telegramSettings.settings as any;
      
      if (!botToken || !chatId) {
        console.log('üì± –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        return;
      }

      const notifier = new TelegramNotifier({ botToken, chatId });
      const result = await notifier.sendBookingNotification(foundSlots);

      if (result.success) {
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', result.error);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram:', error);
    }
  }

  async close() {
    await this.worker.close();
  }
}
